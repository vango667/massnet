import matplotlib.pyplot as plt


def train_loss_val_metric():
    '''
    unet:
    train_loss = [0.587, 0.471, 0.401, 0.337, 0.275, 0.221, 0.173, 0.137, 0.110, 0.095, 0.077, 0.066, 0.072, 0.054, 0.048, 0.078, 0.058, 0.052, 0.048, 0.045]
    val_metric = [0.276, 0.339, 0.417, 0.493, 0.547, 0.656, 0.721, 0.762, 0.788, 0.828, 0.844, 0.790, 0.860, 0.878, 0.881, 0.890, 0.891, 0.914, 0.918, 0.921]
    test_metric = {Accuracy: 0.994±0.005, Precision: 0.901±0.105, Recall: 0.912±0.083, DSC: 0.812±0.185, IoU: 0.717±0.218, HD: 6.316±2.075}

    attunet:
    train_loss = [0.483, 0.371, 0.302, 0.240, 0.186, 0.146, 0.117, 0.092, 0.077, 0.068, 0.058, 0.053, 0.049, 0.045, 0.041, 0.077, 0.054, 0.050, 0.046, 0.043]
    val_metric = [0.363, 0.358, 0.555, 0.621, 0.705, 0.761, 0.798, 0.817, 0.840, 0.864, 0.876, 0.876, 0.886, 0.887, 0.885, 0.900, 0.912, 0.915, 0.922, 0.927]
    test_metric = {Accuracy: 0.993±0.005, Precision: 0.899±0.098, Recall: 0.911±0.093, DSC: 0.835±0.161, IoU: 0.744±0.196, HD: 6.304±2.108}
    
    resunet:
    train_loss = [0.270, 0.119, 0.097, 0.082, 0.071, 0.065, 0.060, 0.057, 0.051, 0.047, 0.045, 0.043, 0.040, 0.042, 0.037, 0.088, 0.067, 0.057, 0.050, 0.043]
    val_metric = [0.726, 0.774, 0.840, 0.833, 0.789, 0.852, 0.824, 0.880, 0.877, 0.859, 0.882, 0.886, 0.800, 0.888, 0.890, 0.876, 0.890, 0.877, 0.911, 0.917]
    test_metric = {Accuracy: 0.992±0.006, Precision: 0.897±0.102, Recall: 0.889±0.116, DSC: 0.876±0.104, IoU: 0.791±0.137, HD: 6.254±2.116}

    massnet (1:2:3:4 5:5):
    train_loss = [0.186, 0.069, 0.056, 0.050, 0.047, 0.044, 0.040, 0.038, 0.039, 0.038, 0.036, 0.036, 0.034, 0.034, 0.033, 0.060, 0.046, 0.043, 0.040, 0.038]
    val_metric = [0.824, 0.852, 0.881, 0.891, 0.897, 0.885, 0.898, 0.895, 0.886, 0.898, 0.874, 0.893, 0.901, 0.889, 0.898, 0.923, 0.928, 0.934, 0.934, 0.938]
    test_metric = {Accuracy: 0.994±0.005, Precision: 0.903±0.104, Recall: 0.914±0.088, DSC: 0.899±0.092, IoU: 0.827±0.124, HD: 6.333±2.102}

    massnet (1:2:3:4 7:3):
    train_loss = [0.153, 0.052, 0.040, 0.038, 0.033, 0.031, 0.029, 0.029, 0.027, 0.027, 0.027, 0.025, 0.025, 0.025, 0.024, 0.046, 0.034, 0.032, 0.030, 0.028]
    val_metric = [0.832, 0.828, 0.874, 0.885, 0.896, 0.877, 0.890, 0.883, 0.890, 0.892, 0.898, 0.899, 0.892, 0.901, 0.897, 0.924, 0.929, 0.933, 0.934, 0.938]
    test_metric = {Accuracy: 0.994±0.004, Precision: 0.915±0.094, Recall: 0.909±0.101, DSC: 0.897±0.095, IoU: 0.825±0.126, HD: 6.291±2.120}

    *massnet (1:1:1:1 5:5):
    train_loss = [0.187, 0.069, 0.055, 0.049, 0.045, 0.041, 0.039, 0.040, 0.037, 0.039, 0.034, 0.034, 0.035, 0.033, 0.033, 0.062, 0.047, 0.044, 0.041, 0.039]
    val_metric = [0.839, 0.842, 0.872, 0.889, 0.892, 0.885, 0.894, 0.887, 0.893, 0.898, 0.886, 0.899, 0.896, 0.904, 0.876, 0.922, 0.930, 0.933, 0.934, 0.937]
    test_metric = {Accuracy: 0.994±0.004, Precision: 0.910±0.096, Recall: 0.924±0.077, DSC: 0.904±0.083, IoU: 0.833±0.116, HD: 6.316±2.112}

    massnet (1:1:1:1 7:3):
    train_loss = [0.156, 0.051, 0.041, 0.037, 0.033, 0.031, 0.028, 0.028, 0.028, 0.026, 0.027, 0.025, 0.025, 0.024, 0.024, 0.045, 0.034, 0.032, 0.030, 0.028]
    val_metric = [0.803, 0.854, 0.838, 0.885, 0.889, 0.880, 0.884, 0.893, 0.892, 0.897, 0.893, 0.893, 0.904, 0.897, 0.870, 0.923, 0.929, 0.934, 0.934, 0.938]
    test_metric = {Accuracy: 0.994±0.004, Precision: 0.907±0.091, Recall: 0.924±0.074, DSC: 0.901±0.081, IoU: 0.828±0.115, HD: 6.325±2.110}

    massnet (stage1 1:1:1:1 5:5):
    train_loss = [0.235, 0.122, 0.101, 0.094, 0.087, 0.081, 0.076, 0.074, 0.072, 0.071, 0.068, 0.065, 0.065, 0.063, 0.062, 0.105, 0.089, 0.085, 0.080, 0.077]
    val_metric = [0.793, 0.811, 0.872, 0.885, 0.885, 0.887, 0.892, 0.897, 0.901, 0.899, 0.907, 0.904, 0.912, 0.906, 0.910, 0.915, 0.924, 0.929, 0.929, 0.934]
    test_metric = {Accuracy: 0.993±0.005, Precision: 0.904±0.100, Recall: 0.894±0.126, DSC: 0.887±0.111, IoU: 0.811±0.142, HD: 6.269±2.139}
    '''
    plt.rcParams["font.family"] = ["sans-serif"]
    plt.rcParams["font.sans-serif"] = ['SimHei']
    # title = 'U-Net'
    # title = 'Attention UNet'
    # title = 'Res-UNet'
    title = 'MASS-Net'
    if title == 'U-Net':
        train_loss = [0.587, 0.471, 0.401, 0.337, 0.275, 0.221, 0.173, 0.137, 0.110, 0.095, 0.077, 0.066, 0.072, 0.054,
                      0.048, 0.078, 0.058, 0.052, 0.048, 0.045]
        val_metric = [0.276, 0.339, 0.417, 0.493, 0.547, 0.656, 0.721, 0.762, 0.788, 0.828, 0.844, 0.790, 0.860, 0.878,
                      0.881, 0.890, 0.891, 0.914, 0.918, 0.921]
    elif title == 'Attention UNet':
        train_loss = [0.483, 0.371, 0.302, 0.240, 0.186, 0.146, 0.117, 0.092, 0.077, 0.068, 0.058, 0.053, 0.049, 0.045,
                      0.041, 0.077, 0.054, 0.050, 0.046, 0.043]
        val_metric = [0.363, 0.358, 0.555, 0.621, 0.705, 0.761, 0.798, 0.817, 0.840, 0.864, 0.876, 0.876, 0.886, 0.887,
                      0.885, 0.900, 0.912, 0.915, 0.922, 0.927]
    elif title == 'Res-UNet':
        train_loss = [0.270, 0.119, 0.097, 0.082, 0.071, 0.065, 0.060, 0.057, 0.051, 0.047, 0.045, 0.043, 0.040, 0.042,
                      0.037, 0.088, 0.067, 0.057, 0.050, 0.043]
        val_metric = [0.726, 0.774, 0.840, 0.833, 0.789, 0.852, 0.824, 0.880, 0.877, 0.859, 0.882, 0.886, 0.800, 0.888,
                      0.890, 0.876, 0.890, 0.877, 0.911, 0.917]
    elif title == 'MASS-Net':
        train_loss = [0.187, 0.069, 0.055, 0.049, 0.045, 0.041, 0.039, 0.040, 0.037, 0.039, 0.034, 0.034, 0.035, 0.033,
                      0.033, 0.062, 0.047, 0.044, 0.041, 0.039]
        val_metric = [0.839, 0.842, 0.872, 0.889, 0.892, 0.885, 0.894, 0.887, 0.893, 0.898, 0.886, 0.899, 0.896, 0.904,
                      0.876, 0.922, 0.930, 0.933, 0.934, 0.937]
    plt.figure(figsize=(10, 7))
    plt.title(f'{title}', fontsize=32, fontproperties='SimHei')
    plt.plot(train_loss, color="b", label='训练损失')
    plt.plot(val_metric, color="r", label='验证精度')
    plt.xticks(fontsize=20)
    plt.yticks(fontsize=20)
    plt.xlabel("轮数", fontsize=32, fontproperties='SimHei')
    plt.ylabel("损失/精度", fontsize=32, fontproperties='SimHei')
    plt.legend(fontsize=32)
    plt.savefig(f'./data/lab/{title}.png')
    # plt.show()


if __name__ == '__main__':
    train_loss_val_metric()
